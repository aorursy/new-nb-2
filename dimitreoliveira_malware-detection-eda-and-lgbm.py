import dask

import dask.dataframe as dd

import warnings

import numpy as np

import pandas as pd

import seaborn as sns

import lightgbm as lgb

import matplotlib.pyplot as plt

from sklearn.preprocessing import LabelEncoder

from sklearn.model_selection import train_test_split

from sklearn.metrics import confusion_matrix, mean_squared_error, classification_report




sns.set(style="whitegrid")

warnings.filterwarnings("ignore")

pd.set_option('display.float_format', lambda x: '%.2f' % x)
dtypes = {

        'MachineIdentifier':                                    'category',

        'ProductName':                                          'category',

        'EngineVersion':                                        'category',

        'AppVersion':                                           'category',

        'AvSigVersion':                                         'category',

        'IsBeta':                                               'int8',

        'RtpStateBitfield':                                     'float16',

        'IsSxsPassiveMode':                                     'int8',

        'DefaultBrowsersIdentifier':                            'float16',

        'AVProductStatesIdentifier':                            'float32',

        'AVProductsInstalled':                                  'float16',

        'AVProductsEnabled':                                    'float16',

        'HasTpm':                                               'int8',

        'CountryIdentifier':                                    'int16',

        'CityIdentifier':                                       'float32',

        'OrganizationIdentifier':                               'float16',

        'GeoNameIdentifier':                                    'float16',

        'LocaleEnglishNameIdentifier':                          'int8',

        'Platform':                                             'category',

        'Processor':                                            'category',

        'OsVer':                                                'category',

        'OsBuild':                                              'int16',

        'OsSuite':                                              'int16',

        'OsPlatformSubRelease':                                 'category',

        'OsBuildLab':                                           'category',

        'SkuEdition':                                           'category',

        'IsProtected':                                          'float16',

        'AutoSampleOptIn':                                      'int8',

        'PuaMode':                                              'category',

        'SMode':                                                'float16',

        'IeVerIdentifier':                                      'float16',

        'SmartScreen':                                          'category',

        'Firewall':                                             'float16',

        'UacLuaenable':                                         'float32',

        'Census_MDC2FormFactor':                                'category',

        'Census_DeviceFamily':                                  'category',

        'Census_OEMNameIdentifier':                             'float16',

        'Census_OEMModelIdentifier':                            'float32',

        'Census_ProcessorCoreCount':                            'float16',

        'Census_ProcessorManufacturerIdentifier':               'float16',

        'Census_ProcessorModelIdentifier':                      'float16',

        'Census_ProcessorClass':                                'category',

        'Census_PrimaryDiskTotalCapacity':                      'float32',

        'Census_PrimaryDiskTypeName':                           'category',

        'Census_SystemVolumeTotalCapacity':                     'float32',

        'Census_HasOpticalDiskDrive':                           'int8',

        'Census_TotalPhysicalRAM':                              'float32',

        'Census_ChassisTypeName':                               'category',

        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',

        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',

        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',

        'Census_PowerPlatformRoleName':                         'category',

        'Census_InternalBatteryType':                           'category',

        'Census_InternalBatteryNumberOfCharges':                'float32',

        'Census_OSVersion':                                     'category',

        'Census_OSArchitecture':                                'category',

        'Census_OSBranch':                                      'category',

        'Census_OSBuildNumber':                                 'int16',

        'Census_OSBuildRevision':                               'int32',

        'Census_OSEdition':                                     'category',

        'Census_OSSkuName':                                     'category',

        'Census_OSInstallTypeName':                             'category',

        'Census_OSInstallLanguageIdentifier':                   'float16',

        'Census_OSUILocaleIdentifier':                          'int16',

        'Census_OSWUAutoUpdateOptionsName':                     'category',

        'Census_IsPortableOperatingSystem':                     'int8',

        'Census_GenuineStateName':                              'category',

        'Census_ActivationChannel':                             'category',

        'Census_IsFlightingInternal':                           'float16',

        'Census_IsFlightsDisabled':                             'float16',

        'Census_FlightRing':                                    'category',

        'Census_ThresholdOptIn':                                'float16',

        'Census_FirmwareManufacturerIdentifier':                'float16',

        'Census_FirmwareVersionIdentifier':                     'float32',

        'Census_IsSecureBootEnabled':                           'int8',

        'Census_IsWIMBootEnabled':                              'float16',

        'Census_IsVirtualDevice':                               'float16',

        'Census_IsTouchEnabled':                                'int8',

        'Census_IsPenCapable':                                  'int8',

        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',

        'Wdft_IsGamer':                                         'float16',

        'Wdft_RegionIdentifier':                                'float16',

        'HasDetections':                                        'int8'

        }
train = dd.read_csv('../input/train.csv', dtype=dtypes)

train = train.compute()
def update_feature_lists():

    binary = [c for c in train.columns if train[c].nunique() == 2]

    numerical = ['Census_ProcessorCoreCount',

                 'Census_PrimaryDiskTotalCapacity',

                 'Census_SystemVolumeTotalCapacity',

                 'Census_TotalPhysicalRAM',

                 'Census_InternalPrimaryDiagonalDisplaySizeInInches',

                 'Census_InternalPrimaryDisplayResolutionHorizontal',

                 'Census_InternalPrimaryDisplayResolutionVertical',

                 'Census_InternalBatteryNumberOfCharges']

    categorical = [c for c in train.columns if (c not in numerical) & (c not in binary)]

    return binary, numerical, categorical

    

binary_columns, true_numerical_columns, categorical_columns = update_feature_lists()
print('Dataset number of records: %s' % train.shape[0])

print('Dataset number of columns: %s' % train.shape[1])

train.head()
total = train.shape[0]

missing_df = []

cardinality_df = []

for col in train.columns:

    missing_df.append([col, train[col].count(), total])

    cardinality = train[col].nunique()

    if cardinality > 2 and col != 'MachineIdentifier':

        cardinality_df.append([col, cardinality])

    

missing_df = pd.DataFrame(missing_df, columns=['Column', 'Number of records', 'Total']).sort_values("Number of records", ascending=False)

cardinality_df = pd.DataFrame(cardinality_df, columns=['Column', 'Cardinality']).sort_values("Cardinality", ascending=False)

type_df = [['Binary columns', len(binary_columns)], ['Numerical columns', len(true_numerical_columns)], ['Categorical columns', len(categorical_columns)]]

type_df = pd.DataFrame(type_df, columns=['Type', 'Column count']).sort_values('Column count', ascending=True)
f, ax = plt.subplots(figsize=(7, 7))

sns.barplot(x="Column count", y="Type", data=type_df, label="Missing", palette='Spectral')

plt.show()
f, ax = plt.subplots(figsize=(10, 15))

sns.set_color_codes("pastel")

sns.barplot(x="Total", y="Column", data=missing_df, label="Missing", color="orange")

sns.barplot(x="Number of records", y="Column", data=missing_df, label="Existing", color="b")

ax.legend(ncol=2, loc="upper right", frameon=True)

plt.show()
f, ax = plt.subplots(figsize=(10, 15))

sns.set_color_codes("pastel")

sns.barplot(x="Cardinality", y="Column", data=cardinality_df, label="Existing", color="red")

plt.show()
f, ax = plt.subplots(figsize=(6, 6))

ax = sns.countplot(x="HasDetections", data=train, label="Label count")

sns.despine(bottom=True)
high_cardinality_columns = [c for c in categorical_columns if train[c].nunique() > 500]

high_cardinality_columns.remove('MachineIdentifier')  # Remove ID

train.drop(high_cardinality_columns, axis=1, inplace=True)

print('Columns with high cardinality: ', high_cardinality_columns)
high_null_columns = [c for c in train.columns if train[c].count() < len(train)*0.6]

train.drop(high_null_columns, axis=1, inplace=True)

print('Columns with more than 40% null values: ', high_null_columns)
unwanted_columns = ['MachineIdentifier']

train.drop(unwanted_columns, axis=1, inplace=True)
# Remove rows from numeric features with missing values (need this to plot distributions)

train.dropna(subset=true_numerical_columns, inplace=True)
binary_columns, true_numerical_columns, categorical_columns = update_feature_lists()
def plot_label_distribution():

    for feature in (binary_columns + categorical_columns):

        if 'Version' in feature and feature != 'Census_OSVersion':

            sns.catplot(data=train, x=feature, col="HasDetections", kind="count", height=8).set_xticklabels(rotation=90)

            sns.despine(left=True)

            plt.tight_layout()



plot_label_distribution()
def plot_label_distribution():

    for feature in (binary_columns + categorical_columns):

        if 'Build' in feature and feature != 'OsBuildLab':

            sns.catplot(data=train, x=feature, col="HasDetections", kind="count", height=8).set_xticklabels(rotation=90)

            sns.despine(left=True)

            plt.tight_layout()



plot_label_distribution()
def plot_distribution():

    for feature in true_numerical_columns:

        f, axes = plt.subplots(1, 3, figsize=(20, 8), sharex=True)

        sns.distplot(train[feature], ax=axes[0]).set_title("Complete set")

        sns.distplot(train[train['HasDetections']==1][feature], ax=axes[1]).set_title("HasDetections = 1")

        sns.distplot(train[train['HasDetections']==0][feature], ax=axes[2]).set_title("HasDetections = 0")

        sns.despine(left=True)

        plt.tight_layout()



plot_distribution()
train.head()
train[true_numerical_columns].describe().T
# Remove rows with NA

train.dropna(inplace=True)
# Get labels

labels = train['HasDetections']

train.drop('HasDetections', axis=1, inplace=True)



X_train, X_val, Y_train, Y_val = train_test_split(train, labels, test_size=0.15,random_state=1)
binary_columns, true_numerical_columns, categorical_columns = update_feature_lists()



# Label encoder

indexer = {}

for col in categorical_columns:

    _, indexer[col] = pd.factorize(X_train[col])

    

for col in categorical_columns:

    X_train[col] = indexer[col].get_indexer(X_train[col])

    X_val[col] = indexer[col].get_indexer(X_val[col])
params = {'num_leaves': 60,

         'min_data_in_leaf': 100, 

         'objective':'binary',

         'max_depth': -1,

         'learning_rate': 0.1,

         "boosting": "gbdt",

         "feature_fraction": 0.8,

         "bagging_freq": 1,

         "bagging_fraction": 0.8 ,

         "bagging_seed": 1,

         "metric": 'auc',

         "lambda_l1": 0.1,

         "random_state": 133,

         "verbosity": -1}
lgb_train = lgb.Dataset(X_train, label=Y_train)

lgb_val = lgb.Dataset(X_val, label=Y_val)
model = lgb.train(params, lgb_train, 10000, valid_sets=[lgb_train, lgb_val], early_stopping_rounds=200, verbose_eval=100)
lgb.plot_importance(model, figsize=(15, 10))

plt.show()
train_predictions_raw = model.predict(X_train, num_iteration=model.best_iteration)

val_predictions_raw = model.predict(X_val, num_iteration=model.best_iteration)



train_predictions = np.around(train_predictions_raw)

val_predictions = np.around(val_predictions_raw)
target_names=['HasDetections = 0', 'HasDetections = 1']

print('-----Train-----')

print(classification_report(Y_train, train_predictions, target_names=target_names))

print('-----Validation-----')

print(classification_report(Y_val, val_predictions, target_names=target_names))
f, axes = plt.subplots(1, 2, figsize=(16, 5), sharex=True)

train_cnf_matrix = confusion_matrix(Y_train, train_predictions)

val_cnf_matrix = confusion_matrix(Y_val, val_predictions)



train_cnf_matrix_norm = train_cnf_matrix / train_cnf_matrix.sum(axis=1)[:, np.newaxis]

val_cnf_matrix_norm = val_cnf_matrix / val_cnf_matrix.sum(axis=1)[:, np.newaxis]



train_df_cm = pd.DataFrame(train_cnf_matrix_norm, index=[0, 1], columns=[0, 1])

val_df_cm = pd.DataFrame(val_cnf_matrix_norm, index=[0, 1], columns=[0, 1])



sns.heatmap(train_df_cm, annot=True, fmt='.2f', cmap="Blues", ax=axes[0]).set_title("Train")

sns.heatmap(val_df_cm, annot=True, fmt='.2f', cmap="Blues", ax=axes[1]).set_title("Validation")

plt.show()
f, ax = plt.subplots(figsize=(24, 6))

sns.set_color_codes("pastel")

ax = sns.distplot(train_predictions_raw, color="blue", kde_kws={"label": "Train"}, axlabel='Probability distribution')

ax = sns.distplot(val_predictions_raw, color="orange", kde_kws={"label": "Validation"})

sns.despine(left=True)
# Because of memory issues I'm loading only part of test set.

test = dd.read_csv('../input/test.csv', dtype=dtypes, usecols=(['MachineIdentifier'] + list(X_train.columns))).head(n=1000000)
submission = pd.DataFrame({"MachineIdentifier":test['MachineIdentifier']})

test.drop('MachineIdentifier', axis=1, inplace=True)



for col in categorical_columns:

    test[col] = indexer[col].get_indexer(test[col])
predictions = model.predict(test, num_iteration=model.best_iteration)
submission["HasDetections"] = predictions

submission.to_csv("submission.csv", index=False)

submission.head(10)