import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

import seaborn as sns



import warnings

warnings.simplefilter(action='ignore', category=FutureWarning)

warnings.filterwarnings('ignore')



import os

print(os.listdir("../input"))
dtypes = {

        'MachineIdentifier':                                    'category',

        'ProductName':                                          'category',

        'EngineVersion':                                        'category',

        'AppVersion':                                           'category',

        'AvSigVersion':                                         'category',

        'IsBeta':                                               'int8',

        'RtpStateBitfield':                                     'float16',

        'IsSxsPassiveMode':                                     'int8',

        'DefaultBrowsersIdentifier':                            'float16',

        'AVProductStatesIdentifier':                            'float32',

        'AVProductsInstalled':                                  'float16',

        'AVProductsEnabled':                                    'float16',

        'HasTpm':                                               'int8',

        'CountryIdentifier':                                    'int16',

        'CityIdentifier':                                       'float32',

        'OrganizationIdentifier':                               'float16',

        'GeoNameIdentifier':                                    'float16',

        'LocaleEnglishNameIdentifier':                          'int8',

        'Platform':                                             'category',

        'Processor':                                            'category',

        'OsVer':                                                'category',

        'OsBuild':                                              'int16',

        'OsSuite':                                              'int16',

        'OsPlatformSubRelease':                                 'category',

        'OsBuildLab':                                           'category',

        'SkuEdition':                                           'category',

        'IsProtected':                                          'float16',

        'AutoSampleOptIn':                                      'int8',

        'PuaMode':                                              'category',

        'SMode':                                                'float16',

        'IeVerIdentifier':                                      'float16',

        'SmartScreen':                                          'category',

        'Firewall':                                             'float16',

        'UacLuaenable':                                         'float32',

        'Census_MDC2FormFactor':                                'category',

        'Census_DeviceFamily':                                  'category',

        'Census_OEMNameIdentifier':                             'float16',

        'Census_OEMModelIdentifier':                            'float32',

        'Census_ProcessorCoreCount':                            'float16',

        'Census_ProcessorManufacturerIdentifier':               'float16',

        'Census_ProcessorModelIdentifier':                      'float16',

        'Census_ProcessorClass':                                'category',

        'Census_PrimaryDiskTotalCapacity':                      'float32',

        'Census_PrimaryDiskTypeName':                           'category',

        'Census_SystemVolumeTotalCapacity':                     'float32',

        'Census_HasOpticalDiskDrive':                           'int8',

        'Census_TotalPhysicalRAM':                              'float32',

        'Census_ChassisTypeName':                               'category',

        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',

        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',

        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',

        'Census_PowerPlatformRoleName':                         'category',

        'Census_InternalBatteryType':                           'category',

        'Census_InternalBatteryNumberOfCharges':                'float32',

        'Census_OSVersion':                                     'category',

        'Census_OSArchitecture':                                'category',

        'Census_OSBranch':                                      'category',

        'Census_OSBuildNumber':                                 'int16',

        'Census_OSBuildRevision':                               'int32',

        'Census_OSEdition':                                     'category',

        'Census_OSSkuName':                                     'category',

        'Census_OSInstallTypeName':                             'category',

        'Census_OSInstallLanguageIdentifier':                   'float16',

        'Census_OSUILocaleIdentifier':                          'int16',

        'Census_OSWUAutoUpdateOptionsName':                     'category',

        'Census_IsPortableOperatingSystem':                     'int8',

        'Census_GenuineStateName':                              'category',

        'Census_ActivationChannel':                             'category',

        'Census_IsFlightingInternal':                           'float16',

        'Census_IsFlightsDisabled':                             'float16',

        'Census_FlightRing':                                    'category',

        'Census_ThresholdOptIn':                                'float16',

        'Census_FirmwareManufacturerIdentifier':                'float16',

        'Census_FirmwareVersionIdentifier':                     'float32',

        'Census_IsSecureBootEnabled':                           'int8',

        'Census_IsWIMBootEnabled':                              'float16',

        'Census_IsVirtualDevice':                               'float16',

        'Census_IsTouchEnabled':                                'int8',

        'Census_IsPenCapable':                                  'int8',

        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',

        'Wdft_IsGamer':                                         'float16',

        'Wdft_RegionIdentifier':                                'float16',

        'HasDetections':                                        'int8'

        }
#unhide cell above if you want to see the data types

numerics = ['int8', 'int16', 'int32', 'int64', 'float16', 'float32', 'float64']

numerical_columns = [c for c,v in dtypes.items() if v in numerics]

categorical_columns = [c for c,v in dtypes.items() if v not in numerics]
retained_columns = numerical_columns + categorical_columns

train = pd.read_csv('../input/train.csv',usecols = retained_columns,dtype = dtypes)



'''

Alternatively you can read data in chunks of e.g. 1000 MB

'''

#chunksize = 100000

#train = None

#

#for chunk in pd.read_csv("../input/train.csv", chunksize=chunksize, iterator=True):

#    if train is None:

#        train=chunk.copy()

#    else:

#        train.append(chunk)
train.head()
train.shape
train.describe()
for column in train.select_dtypes(include=['float','int']):

    if train[column].min() == 0 and train[column].max() == 1 :

        print(column)
#categorical_cols=['PuaMode', 'Census_ProcessorClass', 'Census_InternalBatteryType','SmartScreen','Census_PrimaryDiskTypeName', 'Census_ChassisTypeName','Census_OSInstallTypeName','Census_OSSkuName', 'Census_OSEdition','Census_OSWUAutoUpdateOptionsName',

#'Census_GenuineStateName','Census_ActivationChannel', 'Census_FlightRing',

#'MachineIdentifier','Census_OSBranch', 'Census_OSArchitecture', 'EngineVersion',

#'AppVersion', 'AvSigVersion', 'Platform', 'Processor', 'OsVer','OsPlatformSubRelease',

#'OsBuildLab', 'SkuEdition','Census_MDC2FormFactor', 'ProductName', 'Census_PowerPlatformRoleName',

#'Census_OSVersion']

#

#for column in train:

#    if column in categorical_cols:

#        train[column]=train[column].astype('category')
nans = []

pcts = []

for cols in train:

    nans.append(train[cols].isnull().sum())

    pcts.append(train[cols].isnull().sum()/train.shape[0]*100)
missing_data = pd.DataFrame({"Col":train.columns,"Missing values": nans, "Pct missing [%]": pcts}).sort_values("Missing values", ascending=False)

missing_data[missing_data["Missing values"]!=0].reset_index(drop=True)
complete = (missing_data["Pct missing [%]"]<=10).sum()

a = ((missing_data["Pct missing [%]"]!=0) & (missing_data["Pct missing [%]"]<=10)).sum()

b = ((missing_data["Pct missing [%]"]>10) & (missing_data["Pct missing [%]"]<=50)).sum()

c = (missing_data["Pct missing [%]"]>50).sum()

print("There are:\n{} columns without missing values\n{} columns with less than 10% of missing values\n {} columns withmissing values between 10% and 50%\n {} columns with more than 50% of missing values".format(complete,a,b,c))



labels =["No missing data", "Missing 0-10%", "Missing 10-50%", "Missing over 50% of data"]

fig1, ax1 = plt.subplots(figsize=(8,8))

ax1.pie([complete,a,b,c],autopct='%1.1f%%',labels=labels, textprops={'fontsize': 15})

ax1.axis('equal')

plt.show()
detect_no = (train["HasDetections"]==0).sum()

detect_yes = (train["HasDetections"]==1).sum()



print(detect_no,detect_yes)
labels = 'No detection', 'Detection',

sizes = [detect_no, detect_yes]



fig1, ax1 = plt.subplots(figsize=(8,8))

ax1.pie(sizes, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90, textprops={'fontsize': 15})

ax1.axis('equal')



plt.show()
def my_graphs1(col_name, rotation=45, threshold=0.01, explode =-1):

    '''

    This function creates two graphs: categories distribution (pie chart) and fraction of infected machines in each category (bar graph).

    It accepts explode, rotationand thresholf arguments to increase the clarity of the pie chart as well.

    '''

    category = train[col_name].unique().tolist()

    totals=[]

    infected=[]

    

    for item in category:

        a = (train[col_name]==item).sum()

        totals.append(a)

        infected.append((train[train[col_name]==item]["HasDetections"]==1).sum()/a)

        

    #creating a summary dataframe

    df = pd.DataFrame({"Total":totals,"Infected": infected}, index=category).sort_values("Total", ascending=False) 

    fig, ax = plt.subplots(ncols=2, nrows=1,figsize=(20,8))

    

    #creating a pie chart with conditional explode option

    threshold = train.shape[0]*threshold



    if explode==-1:

        ax[0].pie(df[df["Total"]>threshold]["Total"], labels=df[df["Total"]>threshold].index.values, autopct='%1.1f%%',shadow=False, startangle=rotation, textprops={'fontsize': 15})

    else:

        ax[0].pie(df[df["Total"]>threshold]["Total"], labels=df[df["Total"]>threshold].index.values, autopct='%1.1f%%',shadow=False, startangle=rotation, textprops={'fontsize': 15}, explode=explode)

    ax[0].axis('equal')

    ax[0].set_title(col_name)

    

    #created a sorted bar chart

    df.sort_values("Infected", ascending=False, inplace=True)

    ax[1].set_xticklabels(category,rotation=45, horizontalalignment='right')

    ax[1].set_title('Infected fractions')

    ax[1] = sns.barplot(x=df.index, y="Infected",data=df)

    plt.show()
my_graphs1("ProductName",45)
my_graphs1("Platform",45)
my_graphs1("Census_MDC2FormFactor",0)
my_graphs1("EngineVersion",45)
my_graphs1("OsSuite",0)
my_graphs1("SkuEdition",0)
my_graphs1('Processor',0)
my_graphs1('OsVer',0)
my_graphs1('SmartScreen',0)
fig, ax = plt.subplots(ncols=1, nrows=1,figsize=(20,8))

ax = sns.distplot(train["CountryIdentifier"], kde=False, bins=250)



print("Number of country identifiers: " + str(train["CountryIdentifier"].nunique()))

print("The most frequent country identifier: " + str(train["CountryIdentifier"].mode()[0]))